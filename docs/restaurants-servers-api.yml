openapi: "3.1.0"
info:
  version: 1.0.2
  title: Restaurants API
  license:
    name: MIT
  description: >
    This API has several top-level servers.
    Operation delete has its own server (it its own base url)

servers:
- url: https://{username}.gigantic-server.com:{port}/{basePath}
  description: The production API server
  variables:
    username:
      default: demo
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8443'
        - '443'
      default: '8443'
    basePath:
      default: v2
- url: "https::example.com/api/V3"
  description: V3 example server
- url: "https::example.com/api/V5"
  description: V5 example server
- url: "https::example.com/api/no-description"
paths:
  /restaurants:
    get:
      summary: List all restaurants
      responses:
        '200':
          description: Array of restaurants
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurants"
        '333':
          description: This response has no type, and no content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a restaurantt
      parameters:
        - name: X-User-email
          in: header
          required: true
          deprecated: true

          schema:
            type: string
        - name: X-User-Token
          in: header
          required: true
          schema:
            type: [string, integer]
      requestBody:
        description: How to create a new restaurant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurant'
      responses:
        '333':
          description: Restaurant created
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period.
              schema:
                anyOf:
                  - type: integer
                    format: int32
                  - type: integer
                    format: int66
                  - type: number
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: string
                example: Response 333 example as string
      #   default:
      #     description: unexpected errors
      #     content:
      #       application/json:
      #         schema:
      #           $ref: "#/components/schemas/Error"
  /restaurants/{restaurantId}:
    get:
      summary: Info for a specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The id of the restaurant to retrieve
          minimum: 42
          maximum: 69
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            X-Rate-Limit-Limit:
              description: The number of allowed requests in the current period.
              required: true
              schema:
                type: number
            X-Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                anyOf:
                  - type: integer
                    format: int64
                  - type: number
                    format: yolo
            X-Rate-Limit-Reset:
              description: The number of seconds left in the current period
              required: true
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantWithComment"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The id of the restaurant to retrieve
          schema:
            type: string
        - name: X-User-email
          in: header
          required: true
          schema:
            type: string
            example: polo@bump.sh
        - name: X-User-Token
          in: header
          required: true
          schema:
            type: string
            example: oRWFjCmuzP-cUeshuZpq
      requestBody:
        description: Restaurant update information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurant'
      responses:
        '200':
          description: Expected response with updated restaurant
          headers:
            X-Rate-Limit-Limit-integer:
              description: The number of allowed requests in the current period
              schema:
                oneOf:
                  - type: integer
                    format: int32
                  - type: number
                    format: int64
            X-Rate-Limit-Limit-string:
              description: The number of allowed requests in the current period.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantWithComment"
        '401':
          description: User not authorized to update this restaurant
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Destroy specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: The id of the restaurant to retrieve.
          schema:
            type: string
        - name: X-User-email
          in: header
          required: true
          schema:
            type: string
            example: polo@bump.sh
        - name: X-User-Token
          in: header
          required: true
          schema:
            type: string
            example: oRWFjCmuzP-cUeshuZpq
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      servers:
        - url: https://delete-restaurant.com/V33.3
components:
  schemas:
    Comment:
      type: object
      required:
        - id
        - content
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
          example: Don't forget your Broche before livecode
    NewRestaurant:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          example: This is a new restaurant example.
        address:
          type: string
          example: On a new place.
        updated_at:
          type: string
          format: date-time
          readOnly: true
        password:
          type: string
          format: password
          writeOnly: true
        very_nil: null
        telephone_number:
          oneOf:
            - title: "North American number"
              type: string
              minLength: 8
              maxLength: 13
              pattern: "^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$"
              example: "(888)555-1212"
            - title: "French number"
              type: string
              minLength: 10
              maxLength: 14
              pattern: '^(?:0|\+33 ?|0?0?33 ?|)([1-9] ?(?:[0-9] ?){8})$'
              example: "+33601020304"
    Restaurant:
      type: object
      required:
        - id
        - name
        - address
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: La Broche
        updated_at:
          type: string
          format: date-time
          readOnly: true
        password:
          type: string
          format: password
          writeOnly: true
        address:
          type: string
          example: 14 Rue Romarin, 69001 Lyon
    RestaurantWithComment:
      type: object
      required:
        - id
        - comment
      properties:
        id:
          type: [integer, string]
        name:
          type: string
          nullable: true
          example: La Broche
        comment:
          description: 'example should be empty array'
          type: array
          items:
            type: string
    Restaurants:
      type: array
      items:
        $ref: "#/components/schemas/Restaurant"
    RestaurantInteger:
      type: integer
      description: this restaurant is only an integer
      example: 33
    Error:
      type: object
      nullable: true
      required:
        - code
        - message
      properties:
        code:
          type: [integer]
          format: int32
        message:
          type: string
        EndAge:
          type: integer
          minimum: 0
          maximum: 105
          nullable: true
          example:
            EndAge: null
